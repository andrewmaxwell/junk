import {bezier} from '../jira/bezier';

const canvas = document.querySelector('canvas');
const width = (canvas.width = innerWidth);
const height = (canvas.height = innerHeight);
const ctx = canvas.getContext('2d');

const data =
  '0,0.21;0.006244668912409428,4.89;0.00632393049979371,5.02;0.010408716172647511,5.33;0.014344128071841655,1.01;0.018452680925353817,0.28;0.026887093214271254,1.86;0.030459372891675995,5.15;0.03375042642388502,4.71;0.03381258520919644,4.87;0.033931494201385984,3.16;0.03847418181862639,3.96;0.042415055451815835,5.88;0.047582453811437844,1.84;0.049929982829291696,4.05;0.06260328540974042,5.14;0.06607029049660809,3.25;0.06664088887687573,4.12;0.07065938291947277,3.94;0.07862094326219166,7.03;0.08259816201089723,3.77;0.08333364230003745,5.04;0.08346798633854216,5.29;0.08721159303671175,6.87;0.08788727996304944,3.19;0.09125540906015558,6.87;0.09253015917021085,4.26;0.09407458073517252,5.9;0.09420546966214736,3.13;0.10210880473114269,5.78;0.10210885124225944,6.64;0.10210940937566042,5.79;0.10272234616105946,6.84;0.10281151461631113,3.95;0.10631851261913706,5.04;0.10788973123179098,2.07;0.10794440837175118,0.24;0.10797056755269946,6.15;0.10852782388690559,1.16;0.11650036749762231,1.97;0.11650436745366267,2.98;0.11831386916186316,4.05;0.11999056169841163,2.92;0.12452937560407143,1.81;0.1263426114905023,3.16;0.12634320949057476,6.03;0.13039594235954377,0.06;0.13089115950845298,5.2;0.13090540519906843,0.08;0.13092336513457853,0.05;0.13565504735250286,2.15;0.1360707238473273,9.01;0.14007908511091846,2.95;0.14236310652107517,3.16;0.14240682697081855,0.08;0.14410183824292058,1.88;0.1474265060236481,15.01;0.14859475232079508,1.32;0.15214576977340064,0.19;0.15263281425465264,5.9;0.1549237193100881,3.92;0.15617068899455416,1.11;0.15618707419654007,1.09;0.15665690292014997,0.74;0.15908637123682376,4.2;0.16012037316214478,4.16;0.16293462130323166,3.8;0.16815359384688225,8.45;0.16828161901795444,0.29;0.16877696905576864,2.18;0.1687771085891189,2.09;0.17095987529811466,10.11;0.17211788914957704,0.03;0.17458555638199166,0.23;0.17510036135549714,3.2;0.17676011055665874,1.87;0.18490350943252756,14.5;0.18762750607378706,18.99;0.19686656068244937,12.4;0.19930602224477878,1.04;0.20382069688084625,7.18;0.20382151414761196,0.96;0.2065716367475935,27.36;0.20725701791955056,1.01;0.21192250152945163,4.3;0.21232864988978792,0.03;0.21239073558620158,0.1;0.21245450232726346,7.94;0.21245521328290518,6.09;0.21246057535022173,6.22;0.21246211021707442,15.05;0.2152250898186142,12.88;0.2153068231396314,3.96;0.22037664117631559,2.06;0.22322757329962634,0.03;0.22334324644697925,5.2;0.22336505351628894,1.22;0.22436485648190949,1.73;0.2266306721120819,4.97;0.22664406066926016,0.09;0.23187894665928388,6.41;0.23255085289627447,1.08;0.2365751276062388,23.67;0.23660858903251655,0.1;0.2433043891996031,25.95;0.24340127850023496,7.94;0.24692361188269732,0.33;0.2473008170395257,4.75;0.24731095646297682,4.72;0.24902812695998677,0.73;0.25320515746624284,1.23;0.2549892375269178,5.43;0.2565755855414054,9.67;0.26757418227443536,0.29;0.26859179235332525,2.06;0.2715715336922477,0.21;0.2726868304051994,6.11;0.2755009190796003,0.86;0.27906129191111745,0.21;0.28873180357207234,5.23;0.2950557340718661,7.71;0.29687873729281405,0.04;0.3002707000150311,3.09;0.30035352302506924,0.13;0.30078601661082077,3.43;0.30889414677130395,14.07;0.3088998742831092,6.11;0.3111798824483351,4.43;0.31923649158035167,4.03;0.3197045196592989,0.86;0.31980649860499205,12.25;0.3204119803228209,1.92;0.33233153703413787,9.35;0.3334373919903897,0.18;0.3358575713726043,20.84;0.34339460481942613,9.2;0.34381884600417745,8.49;0.3438751842554501,0.2;0.3535629249629376,1.34;0.36564186862690556,4.09;0.39199304746511293,8.14;0.39954536978045435,7.79;0.40017669839030473,4.14;0.4076340250719105,0.43;0.40809488379443326,6.01;0.41163781495716983,0.23;0.41956768129604743,3.98;0.42086904240932793,6.05;0.4213475288450983,5.12;0.42147540119392973,5.02;0.4236560084582193,2.24;0.4242235371047816,8.8;0.4248819750512509,0.17;0.4282707285064123,2.95;0.4288945023820137,5.89;0.42933717525788784,6.53;0.4380242558663176,8.3;0.43966299533159947,31.62;0.44479962990971517,1.83;0.44496409986298224,0.23;0.44783818123354313,8.13;0.4500035727182108,0.19;0.4529574804540022,5.12;0.45817650615321476,1.39;0.4610509662571549,4.37;0.46105128519052685,2.32;0.46206926735835074,0.1;0.46787925666252145,4.09;0.47707500942149117,27.19;0.4850762437467963,0.15;0.4880152479918925,18.01;0.48805267615198433,4.16;0.48923193893935546,0.3;0.504685941856825,6.02;0.5102880596913573,7.89;0.5224757862129542,1.2;0.524272205008458,0.34;0.5327138929649238,2.03;0.5362028778766776,47.54;0.5527400848365427,8.16;0.5545965295504327,7.45;0.565986351219768,0.06;0.5683803647765892,11.01;0.5746927206527578,6.61;0.5769480380594355,3.86;0.5808676694011615,1.34;0.5820340020980767,7.79;0.5821745653373351,13.28;0.5821787446933971,11.93;0.5821961996510683,1.21;0.5906838472353267,2.59;0.5924209643569764,31.15;0.5963514593666858,4.92;0.601700463703874,8.35;0.6063436086888454,3.37;0.6063442532000346,40.27;0.6067989990329276,3;0.6136115753252784,5.21;0.6147627387536884,2.83;0.6187832327743056,0.92;0.6204930080037526,4.24;0.6245406512276602,3.04;0.6257766376441285,0.06;0.6326395190314653,9.22;0.6378206979705353,4.86;0.6389722534212149,5.64;0.6406701417381101,32.34;0.6487503386507633,12.3;0.653236847483417,2.1;0.6538226217766351,6.18;0.6543601706862304,4.95;0.6567468089088243,6.96;0.6664025300346533,0.33;0.6671096318981319,0.45;0.6738763947404857,1.77;0.6751343277596139,0.18;0.6808630355650443,11.82;0.6808632548317376,3.77;0.6849017021434196,5.91;0.685446353964987,1.03;0.6855317683086726,0.05;0.6889698567698133,0.36;0.6895303423044108,10.47;0.6895656575309133,5.38;0.6974790655789072,9.75;0.6987025006382986,13.03;0.7106876446686758,11.12;0.7106937110471889,2.27;0.713669532163414,8.18;0.7175363401654045,3.76;0.7186542547897846,16.19;0.7216708794442883,11.07;0.725754887717048,6.08;0.7296638680130386,3.01;0.7354428344023382,3.92;0.7372102501943267,9.43;0.7422677560739631,3.3;0.7423789973763345,1.21;0.7492085170040723,10.48;0.7503519462982114,0;0.7532559675390678,2.15;0.7532615953841942,6.19;0.7532695886518297,7.3;0.7537280221518363,19.05;0.7537663273787011,12.81;0.7543795299419102,0.37;0.7550405326442459,2.1;0.7554395581592744,2.02;0.7577314532370522,0;0.7594425639999943,6.89;0.7611742924765464,2.89;0.7618174349100509,0.29;0.7658646994005793,7.19;0.7745411223188284,6.24;0.7778547270982151,0.09;0.783728170854521,1.74;0.7916757712177701,11.18;0.8066676263903385,8.13;0.8145598718802121,16.03;0.8151219520816695,15.03;0.8175612076661961,24.4;0.8181461181815317,3.04;0.8226769454640014,0.17;0.8227064933120269,16.25;0.8272983232463346,1.96;0.8317655033877568,8.81;0.8319477538765122,8.13;0.8340727272007257,6.65;0.8347382879925027,0.22;0.8386680056021178,1.8;0.846795265120475,6.18;0.8537363582728467,0;0.8594823748581527,3.15;0.8635156793692115,12.24;0.8698285070009928,0;0.8709417505803624,0.11;0.875440518414502,0.08;0.8777623998736918,5.96;0.8777816754093613,2.88;0.878350785433893,2.9;0.8818047541191807,17.15;0.8818647335264501,0.2;0.8819356031794839,24.14;0.885847440586932,0.06;0.8875457342149874,0.97;0.889902910967344,2.07;0.8939156841425809,1.07;0.895016595631567,1.02;0.9098855750781317,3.94;0.9099468501522249,0;0.9226436740688577,28.35;0.9230943601457031,33.77;0.9305611950284612,1.78;0.9341416805957494,0;0.9380042826638968,1.99;0.9381439621919371,12.07;0.9432299262305782,5.32;0.943773607963139,5.13;0.9466217095527735,0.01;0.9471281691030452,18.66;0.947206354290299,13.78;0.9484667391097243,9.09;0.9507366742959515,2.5;0.9546704516616143,5.78;0.9553993938166288,0.02;0.9586538098777306,1.82;0.9603993122892855,0.04;0.9673394752193222,48.22;0.968417450083306,15.76;0.9684680741116639,8.17;0.9702147592344733,6.19;0.9724421699711021,0.92;0.9725096642459491,0.92;0.9742568942132689,1.29;0.9747082181568583,1.79;0.9781918343568503,11.78;0.9845895979322593,0;0.9880695198206925,10.59;0.9949014181598297,0.26;0.9989358322932451,0.94;0.9994410227544742,0;0.9999780733306758,0.16;1,0.07'
    .split(';')
    .map((t) => t.split(',').map(Number))
    .map(([x, y]) => ({x: x * width, y: y * 10}));

const smoothLine = (data, rad, numPts = 100) => {
  const result = [];
  const minX = data[0].x;
  const range = data[data.length - 1].x - minX;
  let minIndex = 0;
  let maxIndex = 0;
  for (let i = 0; i < numPts; i++) {
    const x = minX + (i / numPts) * range;
    while (data[minIndex]?.x < x - rad) minIndex++;
    while (data[maxIndex]?.x < x + rad) maxIndex++;

    const vals = [];
    let y = 0;
    let ty = 0;
    for (let i = minIndex; i < maxIndex; i++) {
      const m = 1 - Math.abs(data[i].x - x) / rad;
      const val = data[i].y * m;
      y += val;
      ty += m;
      vals.push(val);
    }
    y /= ty;

    result[i] = {
      x,
      y,
      stdDev: Math.sqrt(vals.reduce((a, v) => a + (v - y) ** 2, 0) / ty),
    };
  }
  return result;
};

ctx.translate(0, height * 0.8);
ctx.scale(1, -1);

ctx.strokeStyle = 'white';
for (const p of data) {
  ctx.beginPath();
  ctx.arc(p.x, p.y, 3, 0, Math.PI * 2);
  ctx.stroke();
}

const rad = 50;
const line = smoothLine(data, rad, innerWidth);
ctx.beginPath();
for (const p of line) ctx.lineTo(p.x, p.y);
ctx.stroke();

ctx.fillStyle = 'rgba(255,255,255,0.2)';
ctx.beginPath();

const sorted = data.sort((a, b) => a.y - b.y);
const lower = smoothLine(
  sorted.slice(0, sorted.length / 2).sort((a, b) => a.x - b.x),
  rad
);
for (const p of lower) ctx.lineTo(p.x, p.y);

const upper = smoothLine(
  sorted.slice(sorted.length / 2).sort((a, b) => a.x - b.x),
  rad
);
for (const p of upper.reverse()) ctx.lineTo(p.x, p.y);

// for (const p of line) ctx.lineTo(p.x, p.y + p.stdDev);
// for (const p of line.reverse()) ctx.lineTo(p.x, p.y - p.stdDev);

ctx.fill();

ctx.strokeStyle = 'red';
ctx.beginPath();
for (const p of bezier(
  data.sort((a, b) => a.x - b.x),
  innerWidth
))
  ctx.lineTo(p.x, p.y);
ctx.stroke();

const numPoints = 100;
const xc = new Float32Array(data.length);
const yc = new Float32Array(data.length);
ctx.lineWidth = 0.01;
// ctx.beginPath();
for (let i = 0; i < numPoints; i++) {
  for (let j = 0; j < data.length; j++) {
    xc[j] = data[j].x;
    yc[j] = data[j].y;
  }
  const p = (i + 1) / (numPoints + 1);
  ctx.beginPath();
  for (let j = 1; j < data.length; j++) {
    for (let k = 0; k < data.length - j; k++) {
      xc[k] = xc[k] * (1 - p) + xc[k + 1] * p;
      yc[k] = yc[k] * (1 - p) + yc[k + 1] * p;
      if (j > 70 && j < 80) ctx.lineTo(xc[k], yc[k]);
    }
  }
  ctx.stroke();
  // ctx.lineTo(xc[0], yc[0]);
}
ctx.stroke();
