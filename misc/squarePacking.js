function canFitSquares(outerSize, squares) {
  const grid = Array.from({length: outerSize}, () => Array(outerSize).fill(0));

  squares.sort((a, b) => b - a); // Sort by size descending for efficient packing
  console.log(
    squares.reduce((a, b) => a + b * b, 0),
    outerSize * outerSize
  );

  function canPlace(x, y, size) {
    if (x + size > outerSize || y + size > outerSize) return false;
    for (let i = 0; i < size; i++) {
      for (let j = 0; j < size; j++) {
        if (grid[y + i][+x + j]) return false;
      }
    }
    return true;
  }

  function placeSquare(x, y, size, place) {
    for (let i = 0; i < size; i++) {
      for (let j = 0; j < size; j++) {
        grid[y + i][+x + j] = place;
      }
    }
  }

  function findSolution(index) {
    if (index === squares.length) return true;

    const size = squares[index];
    for (let y = 0; y <= outerSize - size; y++) {
      for (let x = 0; x <= outerSize - size; x++) {
        if (!canPlace(x, y, size)) continue;
        placeSquare(x, y, size, size);
        if (findSolution(index + 1)) return true;
        placeSquare(x, y, size, 0);
      }
    }

    return false;
  }

  return findSolution(0) && grid;
}

console.time();
// console.log(
//   canFitSquares(
//     36,
//     [
//       1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7,
//       7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
//     ]
//   )
// );

console.log(
  canFitSquares(
    36,
    [
      1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7,
      7, 8, 8, 8, 8, 8, 8, 8, 8,
    ]
  )
    .map((r) => r.map((v) => v || '.').join(''))
    .join('\n')
);
console.timeEnd();
/*

555553336666666666668888888888888888
555553336666666666668888888888888888
555553336666666666668888888888888888
555553336666666666668888888888888888
555553336666666666668888888888888888
444413336666666666668888888888888888
444477777777777777228888888888888888
444477777777777777228888888888888888
444477777777777777555557777777666666
444477777777777777555557777777666666
444477777777777777555557777777666666
444477777777777777555557777777666666
444477777777777777555557777777666666
777777777777777777777227777777666666
777777777777777777777227777777666666
777777777777777777777444455555666666
777777777777777777777444455555666666
777777777777777777777444455555666666
777777777777777777777444455555666666
777777777777777777777444455555666666
888888888888888855555444433388888888
888888888888888855555444433388888888
888888888888888855555444433388888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888855555777777788888888
888888888888888866666666666688888888
888888888888888866666666666688888888
888888888888888866666666666688888888
888888888888888866666666666688888888
888888888888888866666666666688888888
888888888888888866666666666688888888



*/
